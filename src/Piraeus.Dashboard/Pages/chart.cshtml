@page
@model Piraeus.Dashboard.chartModel
@{
    ViewData["Title"] = "chart";
}

<canvas id="line-chart" width="800" height="400"></canvas>

<script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>

<script>
    var chart = new Chart(document.getElementById("line-chart"), {
        type: 'scatter',
        data: {
            labels: [],
            datasets: [{
                data: [],
                label: "message/sec",
                borderColor: "#3e95cd",
                fill: false,
                showLine: true
            }]
        },
        options: {
            title: {
                display: true,
                text: 'Throughput Chart'
            }
        }
    });

    var startTime;

    function updateData(message) {

        var telem = JSON.parse(message);

        if (startTime == null) {
            startTime = jsonObj.lastMessageTimestamp;
        }
        else {
            timeDiff = jsonObj.lastMessageTimestamp - startTime;
            timeDiff /= 1000;
            var secs = Math.round(timeDiff);
            var rate = jsonObj.MessageCount / secs;
            addData(jsonObj.lastMessageTimestamp.getTime(), rate);
        }        
    }

    function addData(x1, y1) {
        chart.data.datasets[0].data.push({
            x: x1,
            y: y1
        });
        chart.update();
    }
</script>

@*<script>

    var radiusMajor = 50;
    var radiusMinor = 25;
    var centerX = 400;
    var centerY = 400;
    var nodeCount = 0;
    var nodes = [];

    function drawInit() {
        drawNode(centerX, centerY, radiusMajor);
        for (var i = 0; i < 12; i++) {
            node = new Object();
            node.num = i;
            node.bytes = i;
            node.last = Date();
            nodes.push(node);
        }

        for (var i = 0; i < 12; i++) {
            angle = getAngleDegrees(i + 1, 12);
            console.writeText(angle);
            drawLine(centerX, centerY, angle, 2);
        }



        drawLine(centerX, centerY, 60, 2);
        drawLine(centerX, centerY, 120, 2);
        drawLine(centerX, centerY, 180, 2);
        drawLine(centerX, centerY, 240, 2);
        drawLine(centerX, centerY, 300, 2);
        drawLine(centerX, centerY, 360, 2);
        drawLine(centerX, centerY, 30, 3);
        drawLine(centerX, centerY, 90, 3);
        drawLine(centerX, centerY, 150, 3);
        drawLine(centerX, centerY, 210, 3);
        drawLine(centerX, centerY, 270, 3);
        drawLine(centerX, centerY, 330, 3);
    }

    function updateNode(node) {
        if (nodes.hasItem(node.name)) {
            writeText(node.x, node.y - 20, node.numMessages);
            writeText(node.x, node.y - 40, node.bytes);
            writeText(node.x, node.y - 60, node.lastError);
            writeText(node.x, node.y - 80, node.timestamp);
        }
        else {
            //get x,y for new node
            //draw a line to the node
            //draw the node
            //add the text
            //add the node
            nodes[node.name] = node;
        }
    }

    function getWeight() {

        for (var i = 0; i < 4; i++) {
            if (i == 0) {
                if (nodes.length + 1 <= 6)
                    return i + 1;
            }
            else {
                if (nodes.length + 1 <= 3 * Math.pow(2, i))
                    return i + 1;
            }
        }
    }

    function getAngleDegrees(index, length) {

        var offset = 60;
        for (var i = 0; i < 4; i++) {

            if (i == 0) {
                if (length <= 6)
                    return index * offset;
            } else {
                if (length <= 3 * Math.pow(2, i))
                    return index * offset;
            }

            //if (i == 0) {
            //    if (nodes.length <= 6)
            //        return nodes.length * offset;

            //}
            //else {
            //    if (nodes.length <= 3 * Math.pow(2, i))
            //        return nodes.length * offset;
            //}

            offset = offset / 2;
        }
    }

    function getXOrdinate(x, r, angle, weight = 1) {

        var rad = (angle / 360) * (2 * Math.PI);
        return (weight * r * Math.cos(rad));
    }

    function getYOrdinate(y, r, angle, weight = 1) {

        var rad = (angle / 360) * (2 * Math.PI);
        return (weight * r * Math.sin(rad));
    }

    function drawLine(x, y, angle, weight = 1) {

        x0 = x + getXOrdinate(x, radiusMajor, angle);
        y0 = y + getYOrdinate(y, radiusMajor, angle);
        x1 = x0 + getXOrdinate(x0, radiusMajor, angle, weight);
        y1 = y0 + getYOrdinate(y0, radiusMajor, angle, weight);

        var canvas = document.getElementById('canvas');
        var ctx = canvas.getContext('2d');
        ctx.beginPath();
        ctx.fillStyle = 'green';
        ctx.lineWidth = 2;
        ctx.moveTo(x0, y0);
        ctx.lineTo(x1, y1);
        ctx.stroke();

        drawNode(x1, y1, radiusMinor);
        x2 = x1 + getXOrdinate(x1, radiusMinor, angle, weight);
        y2 = y1 + getYOrdinate(y1, radiusMinor, angle, weight);
        x3 = x1 + getXOrdinate(x1, radiusMinor / 2, angle, weight);
        y3 = y1 + getYOrdinate(y1, radiusMinor / 2, angle, weight);

        if (angle == 180) {
            writeText(x2, y2, radiusMajor * 2, angle, "Hello World" + angle);
        } else if (angle < 270 && angle > 180) {
            writeText(x2 - radiusMinor, y2, radiusMinor * 2, angle, "Hello World" + angle);
        } else if (angle >= 300 && angle <= 60) {
            writeText(x3 + radiusMinor, y3, radiusMinor, angle, "Hello World" + angle);
        } else if (angle == 90) {
            writeText(x3 - radiusMinor, y3, radiusMinor, angle, "Hello World" + angle);
        } else {
            writeText(x3 - radiusMinor, y3, radiusMinor * 2, angle, "Hello World" + angle);
        }


    }



    function drawNode(x, y, r) {
        var canvas = document.getElementById('canvas');
        var ctx = canvas.getContext('2d');
        ctx.beginPath();
        ctx.arc(x, y, r, 0, 2 * Math.PI, true);
        ctx.fillStyle = 'green';
        ctx.fill();
        ctx.lineWidth = 3;
        ctx.strokeStyle = '#003300';
        ctx.stroke();

    }

    function writeText(x, y, r, angle, text) {

        x1 = x + getXOrdinate(x, r, angle);
        y1 = y + getYOrdinate(y, r, angle);

        var canvas = document.getElementById('canvas');
        var ctx = canvas.getContext('2d');
        ctx.fillStyle = 'black';
        ctx.font = "14px Arial";
        ctx.fillText(text, x1, y1);
    }
</script>*@